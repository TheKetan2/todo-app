{"version":3,"sources":["TodoBanner.js","TodoRow.js","TodoCreator.js","VisibilityControl.js","App.js","serviceWorker.js","index.js"],"names":["TodoBanner","className","this","props","name","tasks","filter","t","done","length","Component","TodoRow","item","action","type","checked","onChange","callback","TodoCreator","updateNewTextValue","event","setState","newItemText","target","value","createNewTodo","state","onClick","VisibilityControl","isChecked","e","description","App","task","todoItems","find","localStorage","setItem","JSON","stringify","toggleTodo","todo","map","todoTableRows","doneValue","key","componentDidMount","data","getItem","parse","userName","showCompleted","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3b01cc72.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport default class TodoBanner extends Component {\r\n  render() {\r\n    return (\r\n      <h4 className=\"bg-primary text-white text-center p-2\">\r\n        {this.props.name}'s To Do List (\r\n        {this.props.tasks.filter(t => !t.done).length} items to do)\r\n      </h4>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class TodoRow extends Component {\r\n  render() {\r\n    return (\r\n      <tr>\r\n        <td>{this.props.item.action}</td>\r\n        <td>\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={this.props.item.done}\r\n            onChange={() => this.props.callback(this.props.item)}\r\n          />\r\n        </td>\r\n      </tr>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class TodoCreator extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { newItemText: \"\" };\r\n  }\r\n\r\n  updateNewTextValue = event => {\r\n    this.setState({ newItemText: event.target.value });\r\n  };\r\n\r\n  createNewTodo = () => {\r\n    this.props.callback(this.state.newItemText);\r\n    this.setState({ newItemText: \"\" });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"my-1\">\r\n        <input\r\n          className=\"form-control\"\r\n          value={this.state.newItemText}\r\n          onChange={this.updateNewTextValue}\r\n        />\r\n        <button className=\"btn btn-primary mt-1\" onClick={this.createNewTodo}>\r\n          Add\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class VisibilityControl extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"form-check\">\r\n        <input\r\n          className=\"form-check-input\"\r\n          type=\"checkbox\"\r\n          checked={this.props.isChecked}\r\n          onChange={e => this.props.callback(e.target.checked)}\r\n        />\r\n        <label className=\"form-check-label\">\r\n          Show {this.props.description}\r\n        </label>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// import logo from './logo.svg';\n// import './App.css';\n\nimport React, { Component } from \"react\";\n\nimport TodoBanner from \"./TodoBanner\";\nimport TodoRow from \"./TodoRow\";\nimport TodoCreator from \"./TodoCreator\";\nimport VisibilityControl from \"./VisibilityControl\";\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userName: \"Ketan\",\n      todoItems: [\n        { action: \"Buy Flowers\", done: false },\n        { action: \"Jump from bed\", done: false },\n        { action: \"wake up at mid night\", done: true },\n        { action: \"Catch ball\", done: false }\n      ],\n      showCompleted: true\n    };\n  }\n  updateNewTextValue = event => {\n    this.setState({ newItemText: event.target.value });\n  };\n\n  createNewTodo = task => {\n    if (!this.state.todoItems.find(item => item.action === task)) {\n      this.setState(\n        {\n          todoItems: [...this.state.todoItems, { action: task, done: false }]\n          // newItemText: \"\"\n        },\n        () => {\n          localStorage.setItem(\"todos\", JSON.stringify(this.state));\n        }\n      );\n    }\n  };\n\n  toggleTodo = todo =>\n    this.setState(\n      {\n        todoItems: this.state.todoItems.map(item =>\n          item.action === todo.action ? { ...item, done: !item.done } : item\n        )\n      },\n      () => {\n        localStorage.setItem(\"todos\", JSON.stringify(this.state));\n      }\n    );\n\n  todoTableRows = doneValue =>\n    this.state.todoItems\n      .filter(item => item.done === doneValue)\n      .map(item => (\n        <TodoRow key={item.action} item={item} callback={this.toggleTodo} />\n      ));\n\n  componentDidMount = () => {\n    let data = localStorage.getItem(\"todos\");\n    this.setState(\n      data != null\n        ? JSON.parse(data)\n        : {\n            userName: \"Ketan\",\n            todoItems: [\n              { action: \"Buy Flowers\", done: false },\n              { action: \"Jump from bed\", done: false },\n              { action: \"wake up at mid night\", done: true },\n              { action: \"Catch ball\", done: false }\n            ],\n            showCompleted: true\n          }\n    );\n  };\n\n  render() {\n    return (\n      <div>\n        <h4 className=\"bg-primary text-white text-center p-2\">\n          <TodoBanner name={this.state.userName} tasks={this.state.todoItems} />\n        </h4>\n        <div className=\"container-fluid\">\n          <TodoCreator callback={this.createNewTodo} />\n          <table className=\"table table-striped table-bordered mt-2\">\n            <thead>\n              <tr>\n                <th>Description</th>\n                <th>Done</th>\n              </tr>\n            </thead>\n            <tbody>{this.todoTableRows(false)}</tbody>{\" \"}\n          </table>\n\n          <div className=\"bg-secondary text-white text-center p-2\">\n            <VisibilityControl\n              description=\"Completed Tasks\"\n              isChecked={this.state.showCompleted}\n              callback={checked => this.setState({ showCompleted: checked })}\n            />\n          </div>\n          {this.state.showCompleted && (\n            <table className=\"table table-striped table-bordered\">\n              <thead>\n                <tr>\n                  <th>Description</th>\n                  <th>Done</th>\n                </tr>\n              </thead>\n              <tbody>{this.todoTableRows(true)}</tbody>\n            </table>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}